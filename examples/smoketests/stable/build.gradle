plugins {
  id 'java'
  id "org.rm3l.datanucleus-gradle-plugin" version "1.5.0"
}

group = 'org.apache.isis.app'
description = 'Apache Isis App - Smoketests'

compileJava {
    options.compilerArgs << '-parameters'
}

sourceSets {
	main {
        resources {
            srcDirs += "src/main/java"
            include "**/*"
            exclude "**/*.java"
        }
    }
    test {
        resources {
            srcDirs += "src/test/java"
            include "**/*"
            exclude "**/*.java"
        }
    }
}

dependencies {
    compile project(':isis-mavendeps-webapp')
    compile project(':isis-mavendeps-jdk11')
    compile project(':isis-security-shiro')
    compile project(':isis-viewer-restfulobjects-viewer')
    compile project(':isis-viewer-restfulobjects-jaxrsresteasy4')
    compile project(':isis-testing-fixtures-applib')
    compile project(':isis-mappings-restclient-api')
    compile project(':isis-extensions-modelannotation')
    compile project(':isis-extensions-secman-model')
    compile project(':isis-extensions-secman-encryption-jbcrypt')
    compile project(':isis-extensions-secman-persistence-jdo')
    compile project(':isis-extensions-secman-shiro-realm')
    compile project(':isis-extensions-shiro-realm-ldap-impl')
    compile(Libs.springDataJpa)
    testCompile(Libs.jerseySpring5) {
        exclude(module: 'jersey-server')
    }
    testCompile(Libs.javaxJson)
    testCompile(Libs.moxy)
    testCompile project(':isis-mavendeps-integtests')
    testCompile(Libs.apachedsTestFramework)
}

datanucleus {
  enhance {
    api 'JDO'
    log4jConfiguration 'logging-dn-enhance.properties'
	verbose true
    persistenceUnitName 'PUinSupportOfGradleBuild'
    //... other options are possible
  }
}


test {
	// enable JUnit Platform (a.k.a. JUnit 5) support
	useJUnitPlatform()

	// explicitly include or exclude tests
	//  include 'org/foo/**'
	//  exclude 'org/boo/**'

	// show standard out and standard error of the test JVM(s) on the console
	testLogging.showStandardStreams = false

	// set heap size for the test JVM(s)
	minHeapSize = "128m"
	maxHeapSize = "512m"

	// set JVM arguments for the test JVM(s)
	jvmArgs '-XX:MaxPermSize=256m'

	// listen to events in the test execution lifecycle
	beforeTest { descriptor ->
	   logger.lifecycle("Running test: " + descriptor)
	}

	// Fail the 'test' task on the first test failure
	failFast = true
}

